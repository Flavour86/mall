<style lang="less">
  .detail-swipe {
    display: flex;
    width: 100%;
    position: relative;
    z-index: 1;
    height: 800rpx;

    image {
      height: 100%;
    }
    .swiper-txt {
      display: block;
      width: 100%;
      height: 86rpx;
      background: rgba(0, 0, 0, .5);
      position: absolute;
      left: 0;
      bottom: 0;
      color: #fff;
      line-height: 86rpx;
      box-sizing: border-box;
      padding: 0 40rpx;
      font-size: 32rpx;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      z-index: 30;
    }

    .dot {
      bottom: 100rpx;
    }
  }
  .detail-price, .detail-ensure {
    height: 80rpx;
    line-height: 80rpx;
    border-bottom: 1px solid #e3e3e3;
    box-sizing: border-box;;
    padding-left: 40rpx;
    background-color: #fff;
    font-size: 36rpx;
    color: #f60000;
  }

  .detail-price .originalPrice {
    color: #999;
    font-size: 28rpx;
    text-decoration: line-through;
    margin-left: 20rpx;
  }

  .detail-ensure-text {
    color: #b4b4b4;
    padding-right: 40rpx;
    font-size: 32rpx;;
    margin-left: 10rpx;
  }
  .detail-ensure-select {
    font-size:40rpx;
  }

  table#info {
    display: block;
    /*border-collapse: collapse;*/

    tbody {
      display: block;
    }
    tr {
      display: flex;
      width: 100%;
      flex-direction: row;
      flex-wrap: nowrap;
      align-items: stretch;
      /*justify-content: space-between;*/
    }
    td {
      /*display: flex;*/
      flex: 1 0;
      border: #fff 1px solid;
      padding: 16 rpx 20 rpx;
      width: 50%;
      font-size: 28 rpx;
    }
  }
</style>

<template>
  <header>
    <text class="page-title" slot="title">{{ detailTitle }}</text>
    <back className="left1" @tap.user="back"/>
  </header>
  <view class="container" wx:if="{{!!products}}">
    <swiper :dataList.sync="swiperList" className="detail-swipe">
      <view class="swiper-txt">{{basicInfo.name}}</view>
    </swiper>
    <view class="detail-price">
      <text class="minPrice">{{minPrice + ':￥' + basicInfo.minPrice}}</text>
      <text class="originalPrice">{{originPrice + ':￥' + basicInfo.originalPrice}}</text>
    </view>
    <view class="detail-ensure">
      <repeat for="{{commissionType}}" index="index" item="item" key="index">
        <text class="detail-ensure-item">
          <icon1 wx:if="{{item.icon}}" type="select2" className="detail-ensure-select" />
          <icon2 wx:else type="select1" className="detail-ensure-select" />
          <text class="detail-ensure-text">{{item.text}}</text>
        </text>
      </repeat>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Interaction from '@/mixins/interaction'
  import i18nMixin from '@/mixins/i18n'
  import Header from '@/components/common/header'
  import Swiper from '@/components/share/swiper/index'
  import Back from '@/components/share/back'
  import Icon from '@/components/share/icon'
  import * as $C from './constants'
  import {connect} from 'wepy-redux'
  import * as actions from './actions'

  @connect(null, {
    ...actions
  })
  export default class Index extends wepy.page {
    components = {
      header: Header,
      back: Back,
      swiper: Swiper,
      icon1: Icon,
      icon2: Icon
    }
    data = {
      id: '',
      products: null,
      swiperList: [],
      basicInfo: null,
      commissionType: $C.COMMISSIONTYPE,
      i18n: {
        ns: 'detail'
      }
    }
    mixins = [i18nMixin, Interaction]

    onLoad(options) {
      const self = this
      this.showLoading()
      this.methods.getProductDetail({
        params: options,
        success (res) {
          const {data} = res
          const swiperList = data.pics.map(pic => ({
            ...pic,
            picUrl: pic.pic
          }))
          const basicInfo = data.basicInfo
          const commissionType = $C.COMMISSIONTYPE.map(type => ({
            text: self.computed[`commission${type}`].apply(self),
            icon: type === basicInfo.commissionType
          }))
          const pageData = {
            products: data,
            swiperList,
            basicInfo,
            commissionType
          }
          Object.keys(data).length && self.syncView(pageData)
          self.hideLoading()
        }
      })
    }

    /**
     * 同步设置到视图
     * @param data {object} 同步到data的数据，以刷新视图
     */
    syncView = (data) => {
      Object.keys(data).forEach(key => {
        if (key in this) {
          this[key] = data[key]
        }
      })
      this.$apply()
    }
    methods = {
      back () {
        wepy.navigateBack()
      }
    }
    computed = {
      detailTitle () {
        return this.$t('detailTitle', 'detail')
      },
      minPrice () {
        return this.$t('minPrice', 'detail')
      },
      originPrice () {
        return this.$t('originPrice', 'detail')
      },
      commission1 () {
        return this.$t('commission1', 'detail')
      },
      commission2 () {
        return this.$t('commission2', 'detail')
      }
    }
  }
</script>
