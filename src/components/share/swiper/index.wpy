<style lang="less">
  .we-slide{
    display: flex;
    align-items: center;
    justify-content: center;
    color: #fff;
    font-size: 2rem;
    width: 100%;
    height: 100%;

    image {
      width: 100%;
    }
  }
  .dot {
    position: absolute;
    width: 100%;
    height: 30rpx;
    left: 0;
    bottom: 10rpx;
    text-align: center;
    z-index: 20;

    view {
      display: inline-block;
      width: 12rpx;
      height: 12rpx;
      border-radius: 12rpx;
      background-color: rgba(150, 150, 150, .5);
      margin: 0 6rpx;
      vertical-align: top;
      box-shadow: 0 0 2rpx 3rpx rgba(0, 0, 0, .2);

      &.active {
        width: 24rpx;
        background-color: #fff;
      }
    }
  }
</style>
<template>
  <view class="{{className}}">
    <we-swipe wx:if="{{!!dataList.length}}" :option.sync="swipeProps">
      <repeat for="{{dataList}}" index="index" item="data" key="index">
        <view class="we-slide">
          <imageX :dSrc="data.picUrl" mode="aspectFill" />
        </view>
      </repeat>
    </we-swipe>
    <view wx:if="{{!!dataList.length}}" class="dot">
      <repeat for="{{dataList}}" index="index" key="key" item="data">
        <view class="{{activeIndex === index ? 'active' : ''}}" />
      </repeat>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import weSwiper from './wepy-com-swiper'
  import ImageX from '@/components/share/image'
  const noop = () => {}
  export default class Swiper extends wepy.component {
    components = {
      'we-swipe': weSwiper,
      imageX: ImageX
    }

    props = {
      className: {
        type: [String]
      },
      options: {
        type: [Object],
        default: {}
      },
      dataList: {
        type: [Array],
        default: []
      }
    }
//    onLoad() {
//      this.swipe = Object.assign({}, this.swipe, this.options)
//    }
    data = {
      active: 0,
      swipe: {
        direction: 'horizontal',
        slideLength: 3,
        onInit: noop,
        /**
         * 手指碰触slide时执行
         * @param swiper
         * @param event
         */
        onTouchStart: noop,
        onTouchMove: noop,
        onTouchEnd: noop,
        /**
         *  slide达到过渡条件时执行
         */
        onSlideChangeStart: noop,
        onSlideChangeEnd: noop,
        onTransitionStart: noop,
        /**
         *  过渡结束时执行
         */
        onTransitionEnd: (swiper) => {
          const {activeIndex} = swiper
          this.active = activeIndex
          this.$apply()
        }
      }
    }

    computed = {
      swipeProps () {
        const {dataList} = this
        const lengthOption = {}
        if (dataList.length > 0) {
          lengthOption.slideLength = dataList.length
        }
        return Object.assign({}, this.swipe, this.options, lengthOption)
      },
      activeIndex () {
        return this.active
      }
    }
    methods = {
    }
  }
</script>
