<style lang="less" src="./scrollMore.less" />

<template>
  <panel :className="className">
    <view wx:if="{{!!title.length}}" slot="title" class="h2-tit-2">{{title}}</view>
    <scroll-view wx:if="{{!!products.length}}" class="slp-list" scroll-y bindscrolltolower="onScrollBottom" style="height: {{height}}">
      <repeat for="{{products}}" index="index" item="item" key="index">
        <view class="slp-item">
          <imageX :dSrc="item.pic" mode="aspectFill"/>
          <text class="slp-name">{{item.name}}</text>
          <view class="slp-price">
            <text class="n-pri">{{item.minPrice}}</text>
            <text class="o-pri">{{item.originalPrice}}</text>
          </view>
        </view>
      </repeat>
    </scroll-view>
    <empty wx:else :emptyText="noDataText" iconType="product" />
  </panel>
</template>

<script>
  import wepy from 'wepy'
  import Panel from '@/components/common/panel'
  import Empty from '@/components/common/empty'
  import ImageX from '@/components/share/image'
  import Interaction from '@/mixins/interaction'
  import i18nMixin from '@/mixins/i18n'
  import { connect } from 'wepy-redux'
  import * as actions from '../../pages/index/redux/actions'


  @connect({}, {
    ...actions
  })
  export default class ScrollMore extends wepy.component {
    components = {
      panel: Panel,
      imageX: ImageX,
      empty: Empty
    }
    props = {
      className: {
        type: [String],
        coerce: function (v) {
          return v ? 'col-box-2 ' + v : 'col-box-2'
        }
      },
      title: {
        type: [String]
      },
      height: {
        type: [String]
      },
      categoryId: {
        type: [String, Number]
      },
      loadSize: {
        type: [Number, String]
      },
      onLoaded: {
        type: [Function],
        default: () => {}
      }
    }
    mixins = [i18nMixin, Interaction]
    data = {
      isFirst: true,
      params: {
        page: 1,
        pageSize: 6
      },
      noData: false,
      products: []
    }

    onSuccess (res) {
      const {data} = res
      this.hideLoading()
      if (!data || res.code === '404' && res.msg === '暂无数据') {
        this.noData = true
        const title = this.computed.noMore.apply(this)
        !this.isFirst && this.showToast({
          title
        })
        return
      }
      this.isFirst = false
      this.products = this.products.concat(data)
      this.params.page = +this.params.page + 1
      this.$apply()
      this.onLoaded && this.onLoaded()
    }

    getProducts () {
      this.showLoading()
      const self = this
      const {params, categoryId, loadSize} = this
      const options = {
        params: {
          ...params,
          categoryId
        },
        success: self.onSuccess.bind(self)
      }
      if (!!loadSize) {
        options.params.pageSize = loadSize
      }
      categoryId && this.methods.getProduct(options)
    }

    onLoad () {
      this.getProducts()
    }

    watch = {
      categoryId (c, o) {
        if (c !== o) {
          this.getProducts()
        }
      }
    }

    methods = {
      onScrollBottom () {
        if (this.noData) {
          return
        }
        this.getProducts()
      }
    }

    computed = {
      noDataText () {
        return this.$t('noData', 'common')
      },
      noMore () {
        return this.$t('noMore', 'common')
      }
    }
  }
</script>
